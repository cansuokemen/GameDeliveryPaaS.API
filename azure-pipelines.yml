# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - master

pool:
  vmImage: 'windows-latest'

variables:
  BuildConfiguration: 'Release'

steps:

# .NET 9 yükle
- task: UseDotNet@2
  displayName: 'Install .NET SDK 9.x'
  inputs:
    packageType: 'sdk'
    version: '9.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Proje adını al
- task: PowerShell@2
  displayName: 'Set project name variable'
  inputs:
    targetType: 'inline'
    script: |
      $projectFile = Get-ChildItem -Recurse *.csproj | Where-Object { $_.Name -like '*GameDeliveryPaaS.API.csproj' } | Select-Object -First 1
      if ($projectFile) {
        Write-Host "Proje bulundu: $($projectFile.FullName)"
        Write-Host "##vso[task.setvariable variable=ProjectName]$($projectFile.BaseName)"
      } else {
        Write-Host "##[warning] Proje dosyası bulunamadı!"
        Write-Host "##vso[task.setvariable variable=ProjectName]GameDeliveryPaaS.API"
      }

# Restore
- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.sln'
    feedsToUse: 'select'

# Build
- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '**/*.sln'
    arguments: '--configuration $(BuildConfiguration) --no-restore'

# Test
- task: DotNetCoreCLI@2
  displayName: 'Run tests'
  inputs:
    command: 'test'
    projects: '**/*Tests*.csproj'
    arguments: '--configuration $(BuildConfiguration) --no-build'
    publishTestResults: true
  continueOnError: true

# Publish
- task: DotNetCoreCLI@2
  displayName: 'Publish project'
  inputs:
    command: 'publish'
    publishWebProjects: true
    projects: '**/*GameDeliveryPaaS.API.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish --no-build'
    zipAfterPublish: true

# Artifact yayınla
- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/publish'
    artifactName: 'GameDeliveryPaaS-API'

# Deploy
- task: AzureWebApp@1
  displayName: 'Deploy to Azure Web App'
  inputs:
    azureSubscription: 'GameDeliveryPaaS-ServiceConnection'
    appType: 'webApp'
    appName: 'GameDeliveryPaaS-API'
    package: '$(Build.ArtifactStagingDirectory)/publish/$(ProjectName).zip'
    deploymentMethod: 'auto'

# Temizlik
- task: DeleteFiles@1
  displayName: 'Cleanup artifacts'
  inputs:
    SourceFolder: '$(Build.ArtifactStagingDirectory)'
    Contents: '**/*'
  condition: always()